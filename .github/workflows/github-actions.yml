# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ['main']

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets the GITHUB_TOKEN permissions to allow deployment to GitHub Pages
#permissions:
#  contents: read
#  pages: write
#  id-token: write

permissions: write-all

# Allow one concurrent deployment
concurrency:
  group: 'pages'
  cancel-in-progress: true

jobs:
  build:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    runs-on: ubuntu-latest

    steps:
      - uses: pnpm/action-setup@v3
        name: Install pnpm
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile
  
      - name: Build
        run: pnpm run build

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4


      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d-%H:%M:%S')"        

# Allow the `dist` folder to be in the release 
# https://gist.github.com/kyle-west/f8ed91e2b04656999a3d057e5aee8059
      - name: Include dist in relase
        run: |

          # Remove our former release branch
          git branch -D lastest-release 2>/dev/null
          git push origin --delete lastest-release 2>/dev/null

          # Create a new branch to run the build under
          git checkout -b lastest-release

          # Ensure we have the latest version of things
          npm ci

          # Build and update docs
          npm run build && git add -A docs

          # Collect the version number
          releaseVersion=`node -e "let package = require('./package.json'); console.log(package.version)"`
          releaseVersion="v$releaseVersion" # of the form vX.X.X

          # Allow the `dist` folder to be in the release
          newIgnore=`sed -e 's#/dist##g' .gitignore`
          echo "$newIgnore" > .gitignore
          git add -A && git commit -m "[BUILD] $releaseVersion"

          # Make a new tag off of the latest build
          git checkout main
          git tag "$releaseVersion" lastest-release
          git push origin "$releaseVersion"
          git push origin lastest-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 

      #- name: Create Release
      #  id: create_release
      #  uses: actions/create-release@v1        
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
      #  with:
      #    tag_name: ${{ steps.date.outputs.date }}
      #    release_name: Release ${{ steps.date.outputs.date }}
      #    body: |
      #      Changes in this Release
      #      - First Change
      #      - Second Change
      #    draft: false
      #    prerelease: false          


      #- name: Update Release
      #  id: update_release
      #  uses: actions/upload-release-asset@v1
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
      #  with:
      #    upload_url: ${{ steps.create_release.outputs.upload_url }}
      #    asset_path: ./dist
      #    asset_name: dist
      #    asset_content_type: application/zip

            
      #- name: 'Create Release'
      #  run: | 
      #    zip -r baz.zip ./dist
      #    gh release create 'my_release' ./baz.zip
      #  env:
      #    GH_TOKEN: ${{ github.token }}
